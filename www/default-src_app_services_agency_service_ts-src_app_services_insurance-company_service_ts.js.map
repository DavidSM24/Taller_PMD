{"version":3,"file":"default-src_app_services_agency_service_ts-src_app_services_insurance-company_service_ts.js","mappings":"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","sources":["./src/app/services/agency.service.ts","./src/app/services/insurance-company.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { environment } from 'src/environments/environment';\r\nimport { Agency } from '../models/Agency';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AgencyService {\r\n\r\n  endpoint: string = \"/agencies\";\r\n\r\n  URLDatabase: string;\r\n\r\n  constructor(public http: HttpClient) {\r\n    this.URLDatabase = environment.herokuConfig.url;\r\n  }\r\n\r\n  private async getListData(endpoint: string): Promise<Agency[]> {\r\n    let agencies: Agency[] = [];\r\n\r\n    return new Promise(resolve => {\r\n      this.http.get(endpoint).subscribe((data: any[]) => {\r\n\r\n        if (data != null && data.length > 0) {\r\n\r\n          for (let a of data) {\r\n            const tmp: Agency = {\r\n              id: a.id,\r\n              zipCode: a.zipCode,\r\n              address: a.address,\r\n              location: a.location,\r\n              phoneNumber: a.phoneNumber,\r\n              amount: a.amount,\r\n              points: a.points,\r\n              pointsRedeemed: a.pointsRedeemed,\r\n              active: a.active,\r\n              myInsuranceCompany: a.myInsuranceCompany,\r\n              myCarRepairs: a.myCarRepairs,\r\n              myExchangesGifts: a.myExchangesGifts,\r\n              myUser: a.myUser\r\n            }\r\n\r\n            agencies.push(tmp);\r\n          }\r\n        }\r\n        console.log(data);\r\n        resolve(agencies);\r\n      }, error => {\r\n        console.log(error);\r\n      });\r\n    });\r\n  }\r\n\r\n  public async getAll(): Promise<Agency[]> {\r\n\r\n    return this.getListData(this.URLDatabase + this.endpoint);\r\n  }\r\n\r\n  public async getAllPaged(limit: number, offset: number): Promise<Agency[]> {\r\n    return this.getListData(this.URLDatabase + this.endpoint + \"/element/\" + limit + \"/page/\" + offset);\r\n  }\r\n\r\n  public async getById(id: number): Promise<Agency> {\r\n\r\n    let agency: Agency = null;\r\n\r\n    return new Promise(resolve => {\r\n      this.http.get(this.URLDatabase + this.endpoint + \"/id/\" + id).subscribe((a: any) => {\r\n\r\n        if (a.id) {\r\n          const tmp: Agency = {\r\n            id: a.id,\r\n            zipCode: a.zipCode,\r\n            address: a.address,\r\n            location: a.location,\r\n            phoneNumber: a.phoneNumber,\r\n            amount: a.amount,\r\n            points: a.points,\r\n            pointsRedeemed: a.pointsRedeemed,\r\n            active: a.active,\r\n            myInsuranceCompany: a.myInsuranceCompany,\r\n            myCarRepairs: a.mycarRepairs,\r\n            myExchangesGifts: a.myExchangeGifts,\r\n            myUser: a.myUser\r\n          }\r\n\r\n          agency = tmp;\r\n        }\r\n\r\n        console.log(agency);\r\n\r\n        resolve(agency);\r\n      }, error => {\r\n        console.log(error);\r\n        console.log(agency);\r\n        resolve(agency);\r\n      });\r\n    });\r\n  }\r\n\r\n  public async getByUserNamePaged(username: string, limit: number, offset: number): Promise<Agency[]> {\r\n    return this.getListData(this.URLDatabase + this.endpoint + \"/username/\" + username + \"/element/\" + limit + \"/page/\" + offset);\r\n  }\r\n\r\n  public async getByisActivePaged(active: boolean, limit: number, offset: number): Promise<Agency[]> {\r\n    return this.getListData(this.URLDatabase + this.endpoint + \"/active/\" + active + \"/element/\" + limit + \"/page/\" + offset);\r\n  }\r\n\r\n  public async createOrUpdate(agency: Agency): Promise<Agency> {\r\n\r\n    if (agency == null\r\n      || agency.address == null\r\n      || agency.address == \"\"\r\n      || agency.phoneNumber == null\r\n      || agency.zipCode == null\r\n      || agency.myInsuranceCompany == null\r\n      || agency.myUser == null) {\r\n\r\n      console.log(\"Algún campo es nulo o no contiene caracteres.\")\r\n      return agency\r\n    }\r\n\r\n    else {\r\n\r\n      console.log(agency);\r\n\r\n      const body = agency;\r\n      return new Promise(resolve => {\r\n\r\n        this.http.post(this.URLDatabase + this.endpoint, body).subscribe((data: any) => {\r\n\r\n          agency=data;\r\n\r\n          console.log(data);\r\n          resolve(agency);\r\n        }, error => {\r\n          console.log(error);\r\n          resolve(agency);\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  public delete(agency: Agency): Promise<boolean> {\r\n\r\n    return new Promise(resolve => {\r\n\r\n      this.http.delete<Agency>(this.URLDatabase + this.endpoint, { body: agency }).subscribe(() => {\r\n        resolve(true);\r\n      }, error => {\r\n        console.log(error);\r\n        resolve(false);\r\n      });\r\n    });\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { resolve } from 'dns';\r\nimport { environment } from 'src/environments/environment';\r\nimport { CarRepair } from '../models/CarRepair';\r\nimport { InsuranceCompany } from '../models/InsuranceCompany';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class InsuranceCompanyService {\r\n\r\n  private endpoint:string=\"/insuranceCompany\";\r\n  private URLDataBase:string;\r\n\r\n  constructor(\r\n    private http:HttpClient\r\n  ) {\r\n    this.URLDataBase=environment.herokuConfig.url;\r\n   }\r\n\r\n\r\n   /**\r\n    * Método que carga una lista de compañias de coches en función de la petición\r\n    * @param endpoint \r\n    * @returns Promise<CarRepair[]>\r\n    */\r\n   private async getListData(endpoint:string):Promise<InsuranceCompany[]>{\r\n\r\n    let insurancesCompany:InsuranceCompany[]=[];\r\n\r\n    return new Promise(resolve=>{\r\n      this.http.get(endpoint).subscribe((data:any[])=>{\r\n        if(data!=null&&data.length>0){\r\n          for(let insuranceCompany of data){\r\n\r\n            const tmp:InsuranceCompany={//se instancia una compañia\r\n              id:insuranceCompany.id,\r\n              cia_Name:insuranceCompany.cia_Name\r\n            }\r\n\r\n            insurancesCompany.push(tmp);\r\n          }\r\n        }\r\n\r\n        resolve(insurancesCompany);\r\n\r\n      },error=>{\r\n        console.log(error);\r\n        //mandar una alerta\r\n      });\r\n    });\r\n   }\r\n\r\n   //All\r\n\r\n   /**\r\n    * Método que devuelve con todas las compañias de seguros de la base de datos\r\n    * @returns Promise<InsuranceCompany[]>\r\n    */\r\n   public async getAll():Promise<InsuranceCompany[]>{\r\n\r\n     return this.getListData(this.URLDataBase+this.endpoint);\r\n\r\n   }\r\n\r\n   //allPaged\r\n\r\n   /**\r\n    * Método que devuelve las compañias de seguros de la base de datos de forma paginada\r\n    * @param limit  número de reparaciones que se quiera obtener\r\n    * @param offset a partir de que reparación se empieza a contar\r\n    * @returns Promise<InsuranceCompany[]>\r\n    */\r\n   public async getAllPaged(limit:number,offset:number):Promise<InsuranceCompany[]>{\r\n\r\n    return this.getListData(this.URLDataBase+this.endpoint+\"/elements/\"+limit+\"/page/\"+offset);\r\n\r\n   }\r\n\r\n   //byCiaNAme\r\n   /**\r\n    * Metodo que devuelve las compañias de seguros que coincidan con  el nombre introducido\r\n    * @param name Nombre de la compañia de seguros que se quiera buscar\r\n    * @returns Promise<InsuranceCompany[]>\r\n    */\r\n   public async getByCiaName(name:string):Promise<InsuranceCompany[]>{\r\n\r\n    return this.getListData(this.URLDataBase+this.endpoint+\"/CIA_Name/\"+name);\r\n   }\r\n\r\n\r\n   //ByNamePaged\r\n   /**\r\n    * Método que devuelve las compañias de seguros que coincidad con el nombre introducido de forma paginadas\r\n    * @param name Nombre de la compañia de seguros que se quiera buscar\r\n    * @param limit Número de elementos que se quiera devolver\r\n    * @param offset A partir de que elemento se devuelve\r\n    * @returns Promise<InsuranceCompany[]>\r\n    */\r\n   public async getByNamePaged(name:string,limit:number,offset:number):Promise<InsuranceCompany[]>{\r\n\r\n    return this.getListData(this.URLDataBase+this.endpoint+\"/CIA_Name/\"+name+\"/elements/\"+limit+\"/page/\"+offset);\r\n   }\r\n\r\n   //ByID\r\n   /**\r\n    * Método que devuelva una compañia de seguros que tenga el id\r\n    * @param id número del id de la compañia que se quiera buscar\r\n    * @returns Promise<InsuranceCompany>\r\n    */\r\n   public async getById(id:number):Promise<InsuranceCompany>{\r\n\r\n    let insuranceCompany:InsuranceCompany=null;\r\n\r\n    return new Promise(resolve=>{\r\n      this.http.get(this.URLDataBase+this.endpoint+\"/id\"+id).subscribe((data:any)=>{\r\n        if(data.id){\r\n          const tmp:InsuranceCompany={\r\n            id:data.id,\r\n            cia_Name:data.cia_Name\r\n          }\r\n          insuranceCompany=tmp;\r\n          resolve(insuranceCompany);\r\n    }\r\n    },error=>{\r\n      console.error(error);\r\n      //meter una alerta\r\n    });\r\n      \r\n     \r\n    });\r\n    \r\n   } \r\n\r\n\r\n   //CreateOrUpdate\r\n   public async createOrUpdate(insuranceCompany:InsuranceCompany):Promise<InsuranceCompany>{\r\n     if(insuranceCompany!=null){\r\n       if(insuranceCompany.cia_Name!=null){\r\n\r\n         const body=insuranceCompany;\r\n\r\n         return new Promise(resolve=>{\r\n          this.http.post(this.URLDataBase+this.endpoint,body).subscribe((data:any)=>{\r\n\r\n            insuranceCompany=data;\r\n            resolve(insuranceCompany);\r\n          },error=>{\r\n            resolve(error);\r\n          });\r\n         });\r\n\r\n       }else{//alerta por nombre nulo\r\n\r\n       }\r\n     }else{//alerta por compañia nula\r\n\r\n     }\r\n   }\r\n\r\n\r\n   //delete\r\n   public delete (insuranceCompany:InsuranceCompany):Promise<boolean>{\r\n     return new Promise(resolve=>{\r\n       this.http.delete<InsuranceCompany>(this.URLDataBase+this.endpoint,{body:insuranceCompany}).subscribe(()=>{\r\n         resolve(true);\r\n       },error=>{\r\n         resolve(false);\r\n       });\r\n     });\r\n   }\r\n}\r\n"],"names":[],"sourceRoot":"webpack:///"}